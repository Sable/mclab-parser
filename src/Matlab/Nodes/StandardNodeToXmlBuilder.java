package Matlab.Nodes;

import Matlab.DotNet.*;
import Matlab.Info.Information;
import Matlab.Utils.*;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import java.lang.reflect.*;
import java.util.*;

public class StandardNodeToXmlBuilder
{
    // region STATIC METHODS:

    // region MAIN METHODS:

    public static Document Build(MNode node)
    {
        Checker.CheckNotNull(node);

        return StandardNodeToXmlBuilder.BuildDocument(node);
    }

    // endregion

    // region BUILDER METHODS:

    private static Document BuildDocument(IMNode node)
    {
        Checker.CheckNotNull(node);

        try
        {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();

            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();

            Document document = dBuilder.newDocument();

            document.appendChild(document.createComment(String.format("Generated by %1$s (version %2$s)", Information.MatlabParser, Information.Version)));

            document.appendChild(document.createComment(Information.Copyright));

            document.appendChild(document.createComment(Information.AllRightsReserved));

            Element root = StandardNodeToXmlBuilder.BuildElement(node, document);

            document.appendChild(root);

            return document;
        }
        catch (Exception ex)
        {
            throw new RuntimeException("CHECKED EXCEPTION", ex);
        }
    }

    private static Element BuildElement(IMNode node, Document document)
    {
        try
        {
            Class nodeType = node.getClass();

            String nodeName = nodeType.getSimpleName().endsWith("Node") ? nodeType.getSimpleName().substring(0, nodeType.getSimpleName().length() - 4) : nodeType.getSimpleName();

            Element root = document.createElement(nodeName);

            List<Method> informationProperties = DotNetEnumerable.ToList(DotNetEnumerable.Where(DotNetEnumerable.ToIterable(nodeType.getMethods()), x -> !Modifier.isStatic(x.getModifiers()) && Modifier.isPublic(x.getModifiers()) && x.isAnnotationPresent(Matlab.Nodes.Information.class) && x.getName().startsWith("Get")));

            Collections.sort(informationProperties, (x, y) -> new Double(x.getAnnotation(Matlab.Nodes.Information.class).Index()).compareTo(new Double(y.getAnnotation(Matlab.Nodes.Information.class).Index())));

            for (Method m : informationProperties)
            {
                root.setAttribute(m.getName().substring(3), m.invoke(node).toString());
            }

            List<Method> structureProperties = DotNetEnumerable.ToList(DotNetEnumerable.Where(DotNetEnumerable.ToIterable(nodeType.getMethods()), x -> !Modifier.isStatic(x.getModifiers()) && Modifier.isPublic(x.getModifiers()) && x.isAnnotationPresent(Matlab.Nodes.Structure.class) && x.getName().startsWith("Get")));

            Collections.sort(structureProperties, (x, y) -> new Double(x.getAnnotation(Matlab.Nodes.Structure.class).Index()).compareTo(new Double(y.getAnnotation(Matlab.Nodes.Structure.class).Index())));

            ArrayList<Element> elements = new ArrayList<Element>();

            for (Method structureProperty : structureProperties)
            {
                Object propertyValue = structureProperty.invoke(node);

                if (propertyValue != null)
                {
                    boolean modified = false;

                    Element element = document.createElement(nodeName + "." + structureProperty.getName().substring(3));

                    if (propertyValue instanceof Iterable<?>)
                    {
                        Iterable<? extends IMNode> children = (Iterable<? extends IMNode>)propertyValue;

                        if (DotNetEnumerable.Count(children) != 0)
                        {
                            for (IMNode child : children)
                            {
                                element.appendChild(StandardNodeToXmlBuilder.BuildElement(child, document));

                                modified = true;
                            }
                        }
                    }
                    else if (propertyValue instanceof IMNode)
                    {
                        element.appendChild(StandardNodeToXmlBuilder.BuildElement((IMNode)propertyValue, document));

                        modified = true;
                    }

                    if (modified)
                    {
                        elements.add(element);
                    }
                }
            }

            for (Element e : elements)
            {
                root.appendChild(e);
            }

            return root;
        }
        catch(Exception ex)
        {
            throw new RuntimeException("CHECKED EXCEPTION", ex);
        }
    }

    // endregion

    // endregion
}