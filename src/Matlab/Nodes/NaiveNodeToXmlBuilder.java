package Matlab.Nodes;

import Matlab.DotNet.*;
import Matlab.Info.Information;
import Matlab.Utils.*;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import java.lang.reflect.*;
import java.util.*;

public class NaiveNodeToXmlBuilder
{
    // region STATIC METHODS:

    // region MAIN METHODS:

    public static Document Build(MNode node)
    {
        Checker.CheckNotNull(node);

        return NaiveNodeToXmlBuilder.BuildDocument(node);
    }

    // endregion

    // region BUILDER METHODS:

    private static Document BuildDocument(IMNode node)
    {
        Checker.CheckNotNull(node);

        try
        {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();

            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();

            Document document = dBuilder.newDocument();

            document.appendChild(document.createComment(String.format("Generated by %1$s (version %2$s)", Information.MatlabParser, Information.Version)));

            document.appendChild(document.createComment(Information.Copyright));

            document.appendChild(document.createComment(Information.AllRightsReserved));

            org.w3c.dom.Node root = NaiveNodeToXmlBuilder.BuildNode(node, document);

            document.appendChild(root);

            return document;
        }
        catch (Exception ex)
        {
            throw new RuntimeException("CHECKED EXCEPTION", ex);
        }
    }

    private static org.w3c.dom.Node BuildNode(IMNode node, Document document)
    {
        try
        {
            if (node instanceof CommentNode)
            {
                return document.createComment(((CommentNode)node).GetText());
            }
            else
            {
                Class nodeType = node.getClass();

                String nodeName = nodeType.getSimpleName().endsWith("Node") ? nodeType.getSimpleName().substring(0, nodeType.getSimpleName().length() - 4) : nodeType.getSimpleName();

                Element root = document.createElement(nodeName);

                List<Method> informationProperties = DotNetEnumerable.ToList(DotNetEnumerable.Where(DotNetEnumerable.ToIterable(nodeType.getMethods()), x -> !Modifier.isStatic(x.getModifiers()) && Modifier.isPublic(x.getModifiers()) && x.isAnnotationPresent(Matlab.Nodes.Information.class) && x.getName().startsWith("Get")));

                Collections.sort(informationProperties, (x, y) -> new Double(x.getAnnotation(Matlab.Nodes.Information.class).Index()).compareTo(new Double(y.getAnnotation(Matlab.Nodes.Information.class).Index())));

                for (Method m : informationProperties)
                {
                    root.setAttribute(m.getName().substring(3), m.invoke(node).toString());
                }

                for (INode child2 : node.GetChildren())
                {
                    IMNode child = (IMNode) child2;

                    root.appendChild(NaiveNodeToXmlBuilder.BuildNode(child, document));
                }

                return root;
            }
        }
        catch(Exception ex)
        {
            throw new RuntimeException("CHECKED EXCEPTION", ex);
        }
    }

    // endregion

    // endregion
}